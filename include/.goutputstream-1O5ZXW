#ifndef DetectorConstruction_H
#define DetectorConstruction_H 1

class G4LogicalVolume;
class G4VPhysicalVolume;
class G4Material;
class G4VSolid;

#include "sstream"

#include "G4VUserDetectorConstruction.hh"
#include "DetectorConstructionMessenger.hh"
#include "G4VSolid.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4Sphere.hh"
#include "G4SubtractionSolid.hh"
#include "G4UnionSolid.hh"
#include "AbsorberSD.hh"
#include "G4SDManager.hh"
#include "G4MultiFunctionalDetector.hh"
#include "G4PSFlatSurfaceFlux.hh"
#include "G4PSEnergyDeposit.hh"

class DetectorConstruction : public G4VUserDetectorConstruction
{
  public:

    DetectorConstruction();
    ~DetectorConstruction();

    G4VPhysicalVolume* Construct();
    void							 ConstructBeamline();
    G4VSolid*          ConstructBeampipeVacuum();
    G4VSolid*					 ConstructJig();
    void			         ConstructDynamiteSensor();
    void               DefineMaterials();
    void               SetAbsDepth(G4double depth);
    void               SetAbsMaterial(G4String material);
    void							 SetDynamiteConstruction(bool construct);
    bool							 GetDynamiteConstruction();
    void							 SetTrackerConstruction(bool construct);
    bool							 GetTrackerConstruction();
    void               UpdateGeometry();
    void               SetVisAtt();
    G4double           GetAbsorberDepth();
    G4double           GetAbsorberPosition();
    //G4Material         GetArh bsorberMaterial();
    G4double           GetBeamPipeInnerRadius();    
    G4double           GetSensorPosition();
    G4double           GetSensorDepth();
    

  private:
  
  	G4VSolid* expHall_box;
    G4VSolid* beampipe_tube;
    G4VSolid* alcollimator_tube;
    G4VSolid* havarwindow_sphere;
    G4VSolid* havarwindow_actual;
    G4VSolid* beampipe_vac;
    G4VSolid* chamber_alring;
    G4VSolid* chamber_airgap;
    G4VSolid* chamber_window;
    G4VSolid* jig_frame;
    G4VSolid* absorber;
    G4VSolid* dynamite_Si3N4;
    G4VSolid* dynamite_SiO2;
    G4VSolid* dynamite_epi;
    G4VSolid* dynamite_sub;
    G4VSolid* dynamite_back;
    
    // Logical volumes
    //
    G4LogicalVolume* expHall_log;
    G4LogicalVolume* beampipe_log;
    G4LogicalVolume* alcollimator_log;
    G4LogicalVolume* havarwindow_log;
    G4LogicalVolume* beampipe_vac_log;
    G4LogicalVolume* chamber_alring_log;
    G4LogicalVolume* chamber_airgap_log;
    G4LogicalVolume* chamber_window_log;
    G4LogicalVolume* absorber_log;
    G4LogicalVolume* jig_log;
    G4LogicalVolume* dynamite_Si3N4_log;
    G4LogicalVolume* dynamite_SiO2_log;
    G4LogicalVolume* dynamite_epi_log;
    G4LogicalVolume* dynamite_sub_log;
    G4LogicalVolume* dynamite_back_log; // 5mm Al backing


    // Physical volumes
    //
    G4VPhysicalVolume* expHall_phys;
    G4VPhysicalVolume* beampipe_phys;
    G4VPhysicalVolume* alcollimator_phys;
    G4VPhysicalVolume* havarwindow_phys;
    G4VPhysicalVolume* beampipe_vac_phys;
    G4VPhysicalVolume* chamber_alring_phys;
    G4VPhysicalVolume* chamber_airgap_phys;
    G4VPhysicalVolume* chamber_window_phys1;
    G4VPhysicalVolume* chamber_window_phys2;
    G4VPhysicalVolume* absorber_phys;
    G4VPhysicalVolume* jig_phys;
    G4VPhysicalVolume* dynamite_Si3N4_phys;
    G4VPhysicalVolume* dynamite_SiO2_phys;
    G4VPhysicalVolume* dynamite_epi_phys;
    G4VPhysicalVolume* dynamite_sub_phys;
    G4VPhysicalVolume* dynamite_back_phys;
    
    G4MultiFunctionalDetector* absorber_mfd;
    G4PSFlatSurfaceFlux* absorber_fsf;
    G4PSEnergyDeposit* absorber_edep;
    
    G4SDManager* SDman;
	  AbsorberSD* absorber_sd;
    
    DetectorConstructionMessenger* detectorConstructionMessenger;
    
    G4double jig_outer_hx ;
  G4double jig_outer_hy ;
  G4double jig_outer_hz ;
  G4double jig_hwallthickness;
  G4double jig_airgap_hx ;
  G4double jig_airgap_hy;
  G4double jig_airgap_hz;
  G4double jig_posz;
  
  // the beampipe
	G4double beampipe_outerradius;
	G4double beampipe_thickness ;
	G4double beampipe_innerradius;
	G4double beampipe_hz ;
	G4double beampipe_angle;
  G4double beampipe_spanning ;
  
  // the Al collimator within the end of the beampipe
	G4double alcollimator_outerradius; // sits snuggly inside the beampipe
	G4double alcollimator_innerradius;
	G4double alcollimator_hz;
	G4double alcollimator_angle;
	G4double alcollimator_spanning;
	
	// the Havar window at end of beampipe
	G4double havarwindow_thickness;
  G4double havarwindow_outerradius;
  G4double havarwindow_innerradius ;
  G4double havarwindow_startingPhi;
  G4double havarwindow_widthPhi;
  G4double havarwindow_startingEta;
  G4double havarwindow_widthEta;
  
  // Proton Monitor Chamber
  G4double chamberposition_z ;
  G4double chamber_startingangle;
  G4double chamber_spanningangle;
  G4double chamber_alring_outerradius;
  G4double chamber_alring_innerradius;
  G4double chamber_alring_hz;
  G4double chamber_airgap_outerradius;
  G4double chamber_airgap_innerradius;
  G4double chamber_airgap_hz;
  G4double chamber_window_outerradius;
  G4double chamber_window_innerradius;
  G4double chamber_window_hz;
  
  // Absorber parameters
  G4double absorber_hx;
  G4double absorber_hy;
  G4double absorber_hz;
  G4double absorber_posz;      
   G4double absDepth;  
   G4Material* absorber_material; 
   
  // Dynamite sensor
  bool     constructDynamite;
  G4double dynamite_hx;
  G4double dynamite_hy;
  G4double dynamite_Si3N4_hz;
  G4double dynamite_SiO2_hz;
  G4double dynamite_epi_hz;
  G4double dynamite_sub_hz;
  G4double dynamite_back_hz;
  G4double dynamite_posz;
  G4double dynamite_seperation_abs;
  
  // Tracking sensors
  bool			constructTracker;
    
    // Materials
    //
    G4Material* Al;
    G4Material* Si;
    G4Material* Ta;
    G4Material* Cr;
    G4Material* Fe;
    G4Material* Ni;
    G4Material* O;
    G4Material* C;
    G4Material* H;
    G4Material* N;
    G4Material* Mn;
    G4Material* Mo;
    G4Material* W;
    G4Material* Co;
    G4Material* Be;
    G4Material* Water;
    G4Material* Vacuum;
    G4Material* Mylar;
    G4Material* Air;
    G4Material* Steel;
    G4Material* Havar;
    G4Material* Kapton;
    G4Material* Perspex;
    G4Material* Si3N4;
    G4Material* SiO2;
};

#endif
