#include "EventAction.hh"

#include "G4UnitsTable.hh"
#include "G4Event.hh"
#include "G4EventManager.hh"
#include "G4TrajectoryContainer.hh"
#include "G4Trajectory.hh"
#include "G4ios.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
EventAction::EventAction(HistoManager* histo)
:histoManager(histo)
{
	absorberSteps.clear();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
EventAction::~EventAction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
void EventAction::BeginOfEventAction(const G4Event*)
{
	totalEDep = 0.0;
	totalNIEL = 0.0;

	absorberEDep = 0.0;
	absorberNIEL = 0.0;
	absorberSteps.clear();
	nAbsorberIncidentSteps = 0;
	nAbsorberExitingSteps  = 0;
	
	for(int i=0; i<5; i++)
	{
		dynamiteEDep[i] = 0.0;
		dynamiteNIEL[i] = 0.0;
	}
	nDynamiteIncidentSteps = 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
void EventAction::EndOfEventAction(const G4Event* evt)
{
  G4int event_id = evt->GetEventID();
    
  // print out the total amount of energy deposited in each event in the absorber
  G4cout << "Event " << event_id << ": Total EDep = " << G4BestUnit(totalEDep, "Energy") << ", NIEL = " << G4BestUnit(totalNIEL, "Energy") 
  				<< "\n Energy deposited in absorber = " << G4BestUnit(absorberEDep, "Energy") << ", NIEL = " << G4BestUnit(absorberNIEL, "Energy") 
  				<< "\n Energy deposited in dynaMITE = " << G4BestUnit(dynamiteEDep[0], "Energy") << ", NIEL = " << G4BestUnit(dynamiteNIEL[0], "Energy") 
  				<< "\n  Si3N4 layer     = " << G4BestUnit(dynamiteEDep[1], "Energy") << ", NIEL = " << G4BestUnit(dynamiteNIEL[1], "Energy")
  				<< "\n  SiN02 layer     = " << G4BestUnit(dynamiteEDep[2], "Energy") << ", NIEL = " << G4BestUnit(dynamiteNIEL[2], "Energy")
  				<< "\n  Epitaxial layer = " << G4BestUnit(dynamiteEDep[3], "Energy") << ", NIEL = " << G4BestUnit(dynamiteNIEL[3], "Energy")
  				<< "\n  Substrate layer = " << G4BestUnit(dynamiteEDep[4], "Energy") << ", NIEL = " << G4BestUnit(dynamiteNIEL[4], "Energy")
  				<< G4endl;
 
 //G4cout << "### nAbsorberIncidentSteps = " << nAbsorberIncidentSteps << G4endl;
 //G4cout << "### nAbsorberExitingSteps = " << nAbsorberExitingSteps << G4endl;
 //G4cout << "### Incident Energy = " << G4BestUnit(AbsorberIncidentEnergy,"Energy")
 //				<< " Exiting Energy = " << G4BestUnit(AbsorberExitingEnergy,"Energy")
 //				<< " Edep = " << G4BestUnit(absorberEDep, "Energy") 
 //				<< " Difference = " << G4BestUnit((AbsorberIncidentEnergy-AbsorberExitingEnergy)-absorberEDep, "Energy") << G4endl;
 
#ifdef G4ANALYSIS_USE  
	histoManager->FillHisto("total.EDep(PerEvent)", totalEDep, 1);
	histoManager->FillHisto("total.NIEL(PerEvent)", totalNIEL, 1);

  histoManager->FillHisto("absorber.EDep(PerEvent)", absorberEDep, 1);
  histoManager->FillHisto("absorber.NIEL(PerEvent)", absorberNIEL, 1);
  
  histoManager->FillHisto("dynamite.EDep(PerEvent)", dynamiteEDep[0], 1);
  histoManager->FillHisto("dynamite.NIEL(PerEvent)", dynamiteNIEL[0], 1);
  
  if(nDynamiteIncidentSteps == 0)  histoManager->FillHisto("dynamite.ratio.nAbsorbertodynamite", 0, 1);
  else if( nAbsorberExitingSteps > 0 ) histoManager->FillHisto("dynamite.ratio.nAbsorbertodynamite", nDynamiteIncidentSteps/nAbsorberExitingSteps, 1);
  histoManager->FillHisto2D("dynamite.correlation.nAbsorbertodynamite", nDynamiteIncidentSteps, nAbsorberExitingSteps, 1);
#endif 
 
  
  
  // get number of stored trajectories
  //
  G4TrajectoryContainer* trajectoryContainer = evt->GetTrajectoryContainer();
  G4int n_trajectories = 0;
  if (trajectoryContainer) n_trajectories = trajectoryContainer->entries();
  
  // periodic printing
  //
  if (event_id < 100 || event_id%100 == 0) {
    G4cout << ">>> Event " << evt->GetEventID() << G4endl;
    G4cout << "    " << n_trajectories 
	   << " trajectories stored in this event." << G4endl;
  }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void EventAction::AddStep(const G4Step* step)
{
	totalEDep += step->GetTotalEnergyDeposit();
  totalNIEL += step->GetNonIonizingEnergyDeposit();
}

void EventAction::AddAbsorberStep(const G4Step* step)
{
	absorberEDep += step->GetTotalEnergyDeposit();
  absorberNIEL += step->GetNonIonizingEnergyDeposit();
	absorberSteps.push_back(step);
	
	
	if( step->GetPreStepPoint()->GetStepStatus() == fGeomBoundary )
	{
		nAbsorberIncidentSteps++;
		AbsorberIncidentEnergy = step->GetPreStepPoint()->GetKineticEnergy();
	
	}
	
	if( step->GetPostStepPoint()->GetStepStatus() == fGeomBoundary )
	{
		nAbsorberExitingSteps++;
		AbsorberExitingEnergy = step->GetPostStepPoint()->GetKineticEnergy();
	}
  

	
}

void EventAction::AddDynamiteStep(const G4Step* step)
{
	G4double edep = step->GetTotalEnergyDeposit();
	G4double niel = step->GetNonIonizingEnergyDeposit();

	dynamiteEDep[0] += edep;
	dynamiteNIEL[0] += niel;
	
	G4String pvname = step->GetPreStepPoint()->GetPhysicalVolume()->GetName();
		
	if( pvname == "dynamite_Si3N4" )
	{
		dynamiteEDep[1] += edep;
		dynamiteNIEL[1] += niel;
		nDynamiteIncidentSteps++;
		
	}
	else if( pvname == "dynamite_SiO2" )
	{
		dynamiteEDep[2] += edep;
		dynamiteNIEL[2] += niel;
	}
	else if( pvname == "dynamite_epi" )
	{
		dynamiteEDep[3] += edep;
		dynamiteNIEL[3] += niel;
	}
	else
	{
		dynamiteEDep[4] += edep;
		dynamiteNIEL[4] += niel;
	}	
}
