//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: HistoManager.cc,v 1.1 2010-09-21 17:55:58 maire Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "HistoManager.hh"
#include "HistoMessenger.hh"
#include "G4UnitsTable.hh"

#ifdef G4ANALYSIS_USE
#include "AIDA/AIDA.h"
//#include "/home/tony/Software/OpenScientist/osc_vis/17.0/Resources/AIDA/src/cpp/AIDA/AIDA.h"
#endif

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

HistoManager::HistoManager()
:af(0),tree(0),factoryOn(false)
{
#ifdef G4ANALYSIS_USE
  // Creating the analysis factory
  af = AIDA_createAnalysisFactory();
  if(!af) {
    G4cout << " HistoManager::HistoManager() :" 
           << " problem creating the AIDA analysis factory."
           << G4endl;
  }
#endif 
 
  fileName[0] = "bhamBeamline";
  fileType    = "root";
  fileOption  = "export=root";
  
  histoMessenger = new HistoMessenger(this);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

HistoManager::~HistoManager()
{
  delete histoMessenger;
  
#ifdef G4ANALYSIS_USE  
  delete af;
#endif  
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::book()
{
#ifdef G4ANALYSIS_USE
  if(!af) return;

  // Creating a tree mapped to an hbook file.
  fileName[1] = fileName[0] + "." + fileType;
  G4bool readOnly  = false;
  G4bool createNew = true;
  AIDA::ITreeFactory* tf  = af->createTreeFactory();
  tree = tf->create(fileName[1], fileType, readOnly, createNew, fileOption);
  delete tf;
  if(!tree) {
    G4cout << "HistoManager::book() :" 
           << " problem creating the AIDA tree with "
           << " storeName = " << fileName[1]
           << " storeType = " << fileType
           << " readOnly = "  << readOnly
           << " createNew = " << createNew
           << " options = "   << fileOption
           << G4endl;
    return;
  }

  // Creating a histogram factory, whose histograms will be handled by the tree
  AIDA::IHistogramFactory* hf = af->createHistogramFactory(*tree);

  // create selected histograms
  for (G4int k=0; k<int(histoInfo.size()); k++) {
    if (histoInfo[k].exist) {
      histoInfo[k].histo = hf->createHistogram1D( histoInfo[k].Label, histoInfo[k].Title,
                                                  histoInfo[k].Nbins, histoInfo[k].Vmin, histoInfo[k].Vmax);
      factoryOn = true;
    }
  }
  
  // create selected 2D histograms
  for (G4int k=0; k<int(histo2DInfo.size()); k++) {
    if (histo2DInfo[k].exist) {
      histo2DInfo[k].histo = hf->createHistogram2D( histo2DInfo[k].Label, histo2DInfo[k].Title,
                                          histo2DInfo[k].NbinsX, histo2DInfo[k].Xmin, histo2DInfo[k].Xmax,
                                          histo2DInfo[k].NbinsY, histo2DInfo[k].Ymin, histo2DInfo[k].Ymax);
      factoryOn = true;
    }
  }
  
  delete hf;
  if (factoryOn) 
     G4cout << "\n----> Histogram Tree is opened in " << fileName[1] << G4endl;
#endif
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::save()
{
#ifdef G4ANALYSIS_USE
  if (factoryOn) {
    saveAscii();          // Write ascii file, if any   
    tree->commit();       // Writing the histograms to the file
    tree->close();        // and closing the tree (and the file)
    G4cout << "\n----> Histogram Tree is saved in " << fileName[1] << G4endl;

    delete tree;
    tree = 0;
    factoryOn = false;
  }
#endif
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::FillHisto(const G4String& label, G4double e, G4double weight)
{
	G4int ih = GetHistoAddress(label);

  if (ih < 0) {
    G4cout << "---> warning from HistoManager::FillHisto() : histo " << ih
           << "does not exist; e= " << e << " w= " << weight << G4endl;
    return;
  }
#ifdef G4ANALYSIS_USE
  if(histoInfo[ih].exist) histoInfo[ih].histo->fill(e/histoInfo[ih].Unit, weight);
#endif
}

void HistoManager::FillHisto2D(const G4String& label, G4double x, G4double y, G4double weight)
{
	G4int ih = GetHisto2DAddress(label);

  if (ih < 0) {
    G4cout << "---> warning from HistoManager::FillHisto2D() : histo2D " << ih
           << "does not exist; x= " << x << " y= " << y << " w= " << weight << G4endl;
    return;
  }
#ifdef G4ANALYSIS_USE
  if(histo2DInfo[ih].exist) histo2DInfo[ih].histo->fill(x/histo2DInfo[ih].UnitX, y/histo2DInfo[ih].UnitY, weight);
#endif
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::SetHisto(const G4String& label, const G4String& title,
                 G4int nbins, G4double valmin, G4double valmax, const G4String& unit)
{
	for(unsigned i=0; i<histoInfo.size(); i++)
	{
		if( label == histoInfo[i].Label )
		{
			G4cout << "---> warning from HistoManager::SetHisto() : histo " << histoInfo[i].Label
           << "already exists" << G4endl;
			return;
		}
	}
	
	HistoInfo hi;
	hi.Label = label;
	histoInfo.push_back(hi);
	
	G4int ih = GetHistoAddress(label);
	
  G4String titl = title;
  G4double vmin = valmin, vmax = valmax;
  histoInfo[ih].Unit = 1.;

  if (unit != "none") {
    titl = title + " (" + unit + ")";
    histoInfo[ih].Unit = G4UnitDefinition::GetValueOf(unit);
    vmin = valmin/histoInfo[ih].Unit; 
    vmax = valmax/histoInfo[ih].Unit;
  }

  histoInfo[ih].exist = true;
  histoInfo[ih].Label = label;
  histoInfo[ih].Title = titl;
  histoInfo[ih].Nbins = nbins;
  histoInfo[ih].Vmin  = vmin;
  histoInfo[ih].Vmax  = vmax;
  histoInfo[ih].Width = (valmax-valmin)/nbins;

  G4cout << "----> SetHisto " << ih << ": " << titl << ";  "
         << nbins << " bins from "
         << vmin << " " << unit << " to " << vmax << " " << unit << G4endl;

}

G4int HistoManager::GetHistoAddress(const G4String& label)
{
	G4int address = -1;
	for(unsigned i=0; i<histoInfo.size(); i++)
	{
		if( histoInfo[i].Label == label ) address = i;
	}
	if(address <0 ) G4cerr << "Histogram " << label << " not defined" << G4endl;
	assert(address>=0);
	return address;
}

G4int HistoManager::GetHisto2DAddress(const G4String& label)
{
	G4int address = -1;
	for(unsigned i=0; i<histo2DInfo.size(); i++)
	{
		if( histo2DInfo[i].Label == label ) address = i;
	}
	assert(address>=0);
	return address;
}


void HistoManager::SetHisto2D(const G4String& label, const G4String& title,
                 G4int nbinsx, G4double vminx, G4double vmaxx, 
                 G4int nbinsy, G4double vminy, G4double vmaxy,
                 const G4String& unitx, const G4String& unity)
{
	for(unsigned i=0; i<histo2DInfo.size(); i++)
	{
		if( label == histo2DInfo[i].Label )
		{
			G4cout << "---> warning from HistoManager::SetHisto() : histo " << histoInfo[i].Label
           << "already exists" << G4endl;
			return;
		}
	}
	
	Histo2DInfo hi;
	hi.Label = label;
	histo2DInfo.push_back(hi);
	
	G4int ih = GetHisto2DAddress(label);

  G4String titl = title;
  
  histo2DInfo[ih].UnitX = 1.;

  if (unitx != "none") {
    histo2DInfo[ih].UnitX = G4UnitDefinition::GetValueOf(unitx);
    vminx = vminx/histo2DInfo[ih].UnitX; 
    vmaxx = vmaxx/histo2DInfo[ih].UnitX;
  }
  
  histo2DInfo[ih].UnitY = 1.;

  if (unity != "none") {
    histo2DInfo[ih].UnitY = G4UnitDefinition::GetValueOf(unity);
    vminy = vminy/histo2DInfo[ih].UnitY; 
    vmaxy = vmaxy/histo2DInfo[ih].UnitY;
  }

  histo2DInfo[ih].exist = true;
  histo2DInfo[ih].Label = label;
  histo2DInfo[ih].Title = titl;
  histo2DInfo[ih].NbinsX = nbinsx;
  histo2DInfo[ih].NbinsY = nbinsy;
  histo2DInfo[ih].Xmin  = vminx;
  histo2DInfo[ih].Xmax  = vmaxx;
  histo2DInfo[ih].Ymin  = vminy;
  histo2DInfo[ih].Ymax  = vmaxy;

  G4cout << "----> SetHisto2D " << ih << ": " << titl << ";  "
         << nbinsx << " x-bins from "
         << vminx << " " << unitx << " to " << vmaxx << " " << unitx << ";  "
         << nbinsy << " y-bins from "
         << vminy << " " << unity << " to " << vmaxy << " " << unity
         << G4endl;

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::Scale(const G4String& label, G4double fac)
{
	G4int ih = GetHistoAddress(label);
 	if (ih > MaxHisto) {
    G4cout << "---> warning from HistoManager::Scale() : histo " << ih
           << "does not exist  (fac = " << fac << ")"  << G4endl;
    return;
  }
#ifdef G4ANALYSIS_USE
  if(histoInfo[ih].exist) histoInfo[ih].histo->scale(fac);
#endif
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::RemoveHisto(const G4String& label)
{
	G4int ih = GetHistoAddress(label);
	
 	if (ih > MaxHisto) {
    G4cout << "---> warning from HistoManager::RemoveHisto() : histo " << ih
           << "does not exist" << G4endl;
    return;
  }

  histoInfo[ih].histo = 0;  
  histoInfo[ih].exist = false;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::PrintHisto(const G4String& label)
{
	G4int ih = GetHistoAddress(label);
	
 	if (ih < MaxHisto) { histoInfo[ih].ascii = true; histoInfo[0].ascii = true; }
 	else
    G4cout << "---> warning from HistoManager::PrintHisto() : histo " << ih
           << "does not exist" << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include <fstream>

void HistoManager::saveAscii()
{
#ifdef G4ANALYSIS_USE
/*
 if (!ascii[0]) return;
 
 G4String name = fileName[0] + ".ascii";
 std::ofstream File(name, std::ios::out);
 File.setf( std::ios::scientific, std::ios::floatfield );
 
 //write selected histograms
 for (G4int ih=0; ih<MaxHisto; ih++) {
    if (exist[ih] && ascii[ih]) {
      File << "\n  1D histogram " << ih << ": " << Title[ih] 
           << "\n \n \t     X \t\t     Y" << G4endl;
     
      for (G4int iBin=0; iBin<Nbins[ih]; iBin++) {
         File << "  " << iBin << "\t" 
	      << 0.5*(histo[ih]->axis().binLowerEdge(iBin) +
	              histo[ih]->axis().binUpperEdge(iBin)) << "\t"
	      << histo[ih]->binHeight(iBin) 
	      << G4endl;
      } 
    }
 }*/
#endif
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

