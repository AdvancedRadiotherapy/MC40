#include "DetectorConstructionMessenger.hh"

#include "DetectorConstruction.hh"
#include "G4UIdirectory.hh"
#include "G4UIcmdWithADoubleAndUnit.hh"
#include "G4UIcmdWithAString.hh"
#include "G4UIcmdWithoutParameter.hh"

/////////////////////////////////////////////////////////////////////////////
DetectorConstructionMessenger::DetectorConstructionMessenger(DetectorConstruction* Det)
:pDetectorConstruction(Det)
{  
  detDir = new G4UIdirectory("/det/");
  detDir->SetGuidance("detector construction commands");
  
  absDepthCmd = new G4UIcmdWithADoubleAndUnit("/det/setAbsorberDepth", this);
  absDepthCmd->SetGuidance("Set depth of absorber after air chamber");
  absDepthCmd->SetParameterName("AbsDepth", false);
  absDepthCmd->SetUnitCategory("Length");
  absDepthCmd->SetRange("AbsDepth>=0.0");
  absDepthCmd->AvailableForStates(G4State_PreInit,G4State_Idle);
  
  absMaterialCmd = new G4UIcmdWithAString("/det/setAbsorberMaterial", this);
  absMaterialCmd->SetGuidance("Set the material of absorber after air chamber");
  absMaterialCmd->SetParameterName("AbsMaterial", false);
  absMaterialCmd->AvailableForStates(G4State_PreInit,G4State_Idle);
  
  colInnerRadiusCmd = new G4UIcmdWithADoubleAndUnit("/det/setCollimatorInnerRadius", this);
  colInnerRadiusCmd->SetGuidance("Set the inner radius of the collimator at the end of the beampipe");
  colInnerRadiusCmd->SetParameterName("ColInnerRadius", false);
  colInnerRadiusCmd->SetUnitCategory("Length");
  colInnerRadiusCmd->SetRange("ColInnerRadius>=0.0");
  colInnerRadiusCmd->AvailableForStates(G4State_PreInit,G4State_Idle);
  
  dynConstructCmd = new G4UIcmdWithABool("/det/setDynamiteConstruction", this);
  dynConstructCmd->SetGuidance("Set the flag to build the dynamite detector");
  dynConstructCmd->SetParameterName("DynamiteConstruction", false);
  dynConstructCmd->AvailableForStates(G4State_PreInit,G4State_Idle);
  
  trkrConstructCmd = new G4UIcmdWithABool("/det/setTrackerConstruction", this);
  trkrConstructCmd->SetGuidance("Set the flag to build the strip trackers");
  trkrConstructCmd->SetParameterName("TrackerConstruction", false);
  trkrConstructCmd->AvailableForStates(G4State_PreInit,G4State_Idle);
   
  UpdateCmd = new G4UIcmdWithoutParameter("/det/update",this);
  UpdateCmd->SetGuidance("Update calorimeter geometry.");
  UpdateCmd->SetGuidance("This command MUST be applied before \"beamOn\" ");
  UpdateCmd->SetGuidance("if you changed geometrical value(s).");
  UpdateCmd->AvailableForStates(G4State_Idle); 
}

/////////////////////////////////////////////////////////////////////////////
DetectorConstructionMessenger::~DetectorConstructionMessenger()
{
  delete absDepthCmd;
}

/////////////////////////////////////////////////////////////////////////////
void DetectorConstructionMessenger::SetNewValue(G4UIcommand* command, G4String newValue)
{       
  if( command == absDepthCmd )
  { 
  	pDetectorConstruction->SetAbsDepth(absDepthCmd->GetNewDoubleValue(newValue));
  }
  else if( command == absMaterialCmd )
  {
  	pDetectorConstruction->SetAbsMaterial(newValue);
  }
  else if( command == colInnerRadiusCmd )
  {
  	pDetectorConstruction->SetCollimatorInnerRadius(colInnerRadiusCmd->GetNewDoubleValue(newValue));
  }
  else if( command == dynConstructCmd )
  {
  	pDetectorConstruction->SetDynamiteConstruction(dynConstructCmd->GetNewBoolValue(newValue));
  }
  else if( command == trkrConstructCmd )
  {
  	pDetectorConstruction->SetTrackerConstruction(trkrConstructCmd->GetNewBoolValue(newValue));
  }
  else if( command == UpdateCmd )
  { 
  	pDetectorConstruction->UpdateGeometry(); 
  }
}
